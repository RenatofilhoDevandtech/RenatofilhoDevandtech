name: AI Assistant Interactive Workflow
on:
  # Gatilho 1: Quando uma Issue com a label correta √© criada
  issues:
    types: [opened]
  # Gatilho 2: Quando o bot√£o "Limpar Chat" √© usado
  workflow_dispatch:

jobs:
  update_readme:
    # Apenas executa se a label for 'ask-ai-assistant' OU se foi acionado manualmente
    if: (github.event.issue.labels[0].name == 'ask-ai-assistant') || (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate Content based on Trigger
        id: content_generator
        run: |
          # Se o gatilho foi o bot√£o "Limpar Chat" (workflow_dispatch)
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Gera o conte√∫do de "reset"
            CONTENT_HTML="<p align='center'><i>Ol√°! Sou a assistente de IA do Renato. Fa√ßa uma pergunta sobre suas habilidades, experi√™ncia ou projetos.</i></p>"
          else
            # Se o gatilho foi uma nova Issue, gera a resposta da IA
            USER_QUESTION="${{ github.event.issue.title }}"
            PROMPT="Aja como uma assistente de IA para o perfil do desenvolvedor Renato Filho. Um visitante fez a seguinte pergunta sobre ele: '${USER_QUESTION}'. As informa√ß√µes chave sobre o Renato s√£o: Desenvolvedor Full Stack, formado em Redes de Computadores, com foco em Cloud (AWS). Suas tecnologias principais incluem React, Next.js, Node.js, Python, Docker e PostgreSQL. Sua tarefa √© responder a pergunta de forma clara, profissional e amig√°vel, em portugu√™s do Brasil. Retorne APENAS a resposta, sem nenhum t√≠tulo ou formata√ß√£o adicional."
            
            JSON_PAYLOAD=$(jq -n --arg prompt "$PROMPT" '{contents: [{parts: [{text: $prompt}]}]}')
            API_RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${{ secrets.GEMINI_API_KEY }}" -H "Content-Type: application/json" -d "$JSON_PAYLOAD")
            AI_RESPONSE=$(echo "$API_RESPONSE" | jq -r '.candidates[0].content.parts[0].text' | tr -d '\n')

            if [[ -z "$AI_RESPONSE" ]]; then
              AI_RESPONSE="N√£o consegui processar a pergunta no momento, mas o Renato √© um excelente profissional com foco em tecnologias web modernas e infraestrutura de redes!"
            fi

            # --- CORRE√á√ÉO APLICADA AQUI ---
            # Gera o conte√∫do HTML usando uma string multi-linha, que √© mais segura
            CONTENT_HTML="<div style='text-align: left; margin-bottom: 12px;'>
                <p style='margin: 0 0 4px 0; font-size: 12px; color: #848d97;'><strong>Voc√™ perguntou:</strong></p>
                <pre style='background-color: #161b22; color: #c9d1d9; padding: 8px 12px; border-radius: 6px; margin: 0; white-space: pre-wrap; font-family: monospace;'><code>$USER_QUESTION</code></pre>
            </div>
            <div style='text-align: left;'>
                <p style='margin: 0 0 4px 0; font-size: 12px; color: #848d97;'><strong>ü§ñ Assistente de IA responde:</strong></p>
                <pre style='background-color: #1f6feb26; color: #c9d1d9; padding: 8px 12px; border-radius: 6px; margin: 0; white-space: pre-wrap; font-family: monospace;'><code>$AI_RESPONSE</code></pre>
            </div>"
          fi
          
          # Disponibiliza o conte√∫do para o pr√≥ximo passo, tratando quebras de linha
          echo "new_content<<EOF" >> $GITHUB_OUTPUT
          echo "$CONTENT_HTML" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update README file
        run: |
          # Script Python "√† prova de falhas" que reconstr√≥i o README
          python -c "
          import os
          
          readme_path = 'README.md'
          start_marker = ''
          end_marker = ''
          
          # L√™ o conte√∫do multi-linha passado do passo anterior
          new_content_body = os.environ['NEW_CONTENT_HTML']
          
          new_readme_lines = []
          in_block = False
          with open(readme_path, 'r') as f:
              for line in f:
                  if start_marker in line:
                      new_readme_lines.append(line)
                      new_readme_lines.append(new_content_body + '\n')
                      in_block = True
                  elif end_marker in line:
                      new_readme_lines.append(line)
                      in_block = False
                  elif not in_block:
                      new_readme_lines.append(line)
          
          with open(readme_path, 'w') as f:
              f.writelines(new_readme_lines)
          "
        env:
          NEW_CONTENT_HTML: ${{ steps.content_generator.outputs.new_content }}

      - name: Commit and push changes
        run: |
          if [[ -n "$(git status --porcelain README.md)" ]]; then
            git config --global user.name 'GitHub Actions Bot'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            git add README.md
            git commit -m "chore(readme): Update AI assistant response"
            git push
          else
            echo "README is already up to date."
          fi
      
      - name: Close the issue after answering
        if: github.event_name == 'issues'
        uses: peter-evans/close-issue@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          comment: Sua pergunta foi respondida no meu perfil! Obrigado por interagir.
