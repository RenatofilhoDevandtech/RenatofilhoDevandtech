name: Update README Dynamically
on:
  schedule:
    # Roda a cada hora
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Permissão para escrever no repositório

    steps:
      - uses: actions/checkout@v3

      - name: Get Last Commit from GitHub API
        id: last_commit
        run: |
          EVENT_DATA=$(curl --silent "https://api.github.com/users/RenatofilhoDevandtech/events/public")
          REPO_NAME=$(echo "$EVENT_DATA" | jq -r '[.[] | select(.type=="PushEvent")][0].repo.name')
          COMMIT_MESSAGE=$(echo "$EVENT_DATA" | jq -r '[.[] | select(.type=="PushEvent")][0].payload.commits[0].message')
          echo "repo_full_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT

      - name: Ask AI to improve commit message
        id: commit_suggester
        run: |
          PROMPT="Aja como um desenvolvedor sênior. Reescreva a seguinte mensagem de commit para seguir o padrão Conventional Commits (ex: 'feat(auth): Adiciona login com Google'). Seja conciso, técnico e retorne APENAS a mensagem sugerida, sem nenhum texto ou formatação adicional. A mensagem é: '${{ steps.last_commit.outputs.message }}'"
          JSON_PAYLOAD=$(jq -n --arg prompt "$PROMPT" '{contents: [{parts: [{text: $prompt}]}]}')
          API_RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")
          SUGGESTION=$(echo "$API_RESPONSE" | jq -r '.candidates[0].content.parts[0].text' | tr -d '\n' | tr -d '`' | sed 's/\"//g')
          echo "gemini_text=$SUGGESTION" >> $GITHUB_OUTPUT

      - name: Update README file
        env:
          REPO_FULL_NAME: ${{ steps.last_commit.outputs.repo_full_name }}
          COMMIT_MESSAGE: ${{ steps.last_commit.outputs.message }}
          AI_SUGGESTION: ${{ steps.commit_suggester.outputs.gemini_text }}
        run: |
          # Prepara o novo conteúdo que será inserido no README
          NEW_CONTENT=$(cat <<EOF
          <table width="100%">
            <tr>
              <td width="20%"><b>Última Atividade em:</b></td>
              <td><a href="https://github.com/$REPO_FULL_NAME"><b>$REPO_FULL_NAME</b></a></td>
            </tr>
            <tr>
              <td width="20%"><b>Meu Último Commit:</b></td>
              <td><code>$COMMIT_MESSAGE</code></td>
            </tr>
            <tr>
              <td width="20%"><b>Sugestão da IA:</b></td>
              <td><code>$AI_SUGGESTION</code></td>
            </tr>
          </table>
          EOF
          )

          # Usa Python (que é mais robusto para múltiplas linhas) para substituir o conteúdo
          python -c "
          import re
          
          readme_path = 'README.md'
          start_marker = ''
          end_marker = ''
          new_block = f'{start_marker}\n{'$NEW_CONTENT'}\n{end_marker}'
          
          with open(readme_path, 'r+') as f:
              content = f.read()
              new_content = re.sub(f'{start_marker}(.|\n)*?{end_marker}', new_block, content)
              f.seek(0)
              f.truncate()
              f.write(new_content)
          "

      - name: Commit and push changes
        run: |
          # Verifica se houve alguma mudança no arquivo README.md
          if [[ -n "$(git status --porcelain README.md)" ]]; then
            git config --global user.name 'GitHub Actions Bot'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            git add README.md
            git commit -m "chore(readme): Update latest activity"
            git push
          else
            echo "README is already up to date."
          fi
