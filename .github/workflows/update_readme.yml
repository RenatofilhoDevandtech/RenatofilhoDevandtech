name: Update AI Assistant Profile
on:
  schedule:
    # Roda uma vez por dia
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Generate AI Profile Summary
        id: ai_assistant
        run: |
          PROMPT="Aja como uma assistente de IA para um perfil de desenvolvedor. O desenvolvedor se chama Renato Filho. Ele é formado em Redes de Computadores e está focado em se tornar um Desenvolvedor Full Stack com especialidade em Cloud (AWS). Suas principais tecnologias são React, Next.js, Node.js, Python, Docker e PostgreSQL.
          Sua tarefa é escrever um resumo curto e profissional (2-3 sentenças) sobre o Renato, destacando como sua base em redes o diferencia. A cada dia, varie um pouco a formulação para que o texto pareça sempre novo.
          O texto deve ser em português do Brasil, em um tom profissional e inspirador. Retorne APENAS o texto do resumo, sem nenhum título ou formatação adicional (como aspas ou markdown)."
          
          JSON_PAYLOAD=$(jq -n --arg prompt "$PROMPT" '{contents: [{parts: [{text: $prompt}]}]}')
          API_RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")
          SUMMARY=$(echo "$API_RESPONSE" | jq -r '.candidates[0].content.parts[0].text' | tr -d '\n')
          
          if [[ -z "$SUMMARY" ]]; then
            SUMMARY="Renato está constantemente aprimorando suas habilidades em desenvolvimento Full Stack, combinando sua expertise em Redes para construir soluções web de alta performance."
          fi
          
          echo "summary_text=$SUMMARY" >> $GITHUB_OUTPUT

      - name: Update README with AI Summary
        env:
          AI_SUMMARY: ${{ steps.ai_assistant.outputs.summary_text }}
        run: |
          # Gera o novo conteúdo em um arquivo temporário
          cat <<EOF > new_content.html
          <p align="center" style="font-style: italic; max-width: 80%; margin: auto;">
          “${AI_SUMMARY}”
          </p>
          EOF

          # Script Python "à prova de falhas" que reconstrói o README
          python -c "
          import os
          
          readme_path = 'README.md'
          start_marker = ''
          end_marker = ''
          
          with open('new_content.html', 'r') as f:
              new_content_body = f.read()
          
          new_readme_lines = []
          in_block = False
          with open(readme_path, 'r') as f:
              for line in f:
                  if start_marker in line:
                      new_readme_lines.append(line)
                      new_readme_lines.append(new_content_body + '\n')
                      in_block = True
                  elif end_marker in line:
                      new_readme_lines.append(line)
                      in_block = False
                  elif not in_block:
                      new_readme_lines.append(line)
          
          with open(readme_path, 'w') as f:
              f.writelines(new_readme_lines)
          "

      - name: Commit and push changes
        run: |
          if [[ -n "$(git status --porcelain README.md)" ]]; then
            git config --global user.name 'GitHub Actions Bot'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            git add README.md
            git commit -m "chore(readme): Update AI assistant summary"
            git push
          else
            echo "README is already up to date."
          fi
